
--- File: contact.ts ---
import { Entity, PrimaryGeneratedColumn, Column, CreateDateColumn } from 'typeorm';

@Entity('contacts', { name: 'contacts' })
export default class Contact {
  @PrimaryGeneratedColumn('uuid')
    id!: string;

  @Column()
    name!: string;

  @Column({ name: 'last_name' })
    lastName!: string;

  @Column()
    email!: string;

  @Column()
    phone!: string;

  @Column()
    message!: string;

  @CreateDateColumn({ name: 'created_at' })
    createdAt!: Date;
}


--- File: user.ts ---
import { Entity, PrimaryGeneratedColumn, Column, OneToMany, ManyToOne } from 'typeorm';
import { ValueTransformer } from 'typeorm';

const transformer: Record<'date' | 'bigint', ValueTransformer> = {
  date: {
    from: (date: string | null) => date && new Date(parseInt(date, 10)),
    to: (date?: Date) => date?.valueOf().toString(),
  },
  bigint: {
    from: (bigInt: string | null) => bigInt && parseInt(bigInt, 10),
    to: (bigInt?: number) => bigInt?.toString(),
  },
};

@Entity({ name: 'users' })
export class User {
  @PrimaryGeneratedColumn('uuid')
    id!: string;

  @Column({ type: 'varchar', nullable: true })
    name!: string | null;

  @Column({ type: 'varchar', nullable: true, unique: true })
    email!: string | null;

  @Column({ type: 'boolean', nullable: true, transformer: transformer.date })
    emailVerified!: boolean | null;

  @Column({ type: 'varchar', nullable: true })
    image!: string | null;

  @Column({ type: 'varchar', nullable: true })
    role!: string | null;

  @OneToMany(() => SessionEntity, (session) => session.userId)
    sessions!: SessionEntity[];

  @OneToMany(() => AccountEntity, (account) => account.userId)
    accounts!: AccountEntity[];

  @OneToMany(() => VerificationTokenEntity, (token) => token.userId)
    token!: VerificationTokenEntity[];

  @Column()
    password!: string;
}

@Entity({ name: 'accounts' })
export class AccountEntity {
  @PrimaryGeneratedColumn('uuid')
    id!: string;

  @Column({ type: 'uuid' })
    userId!: string;

  @Column()
    type!: string;

  @Column()
    provider!: string;

  @Column()
    providerAccountId!: string;

  @Column({ type: 'varchar', nullable: true })
    refresh_token!: string | null;

  @Column({ type: 'varchar', nullable: true })
    access_token!: string | null;

  @Column({
    nullable: true,
    type: 'bigint',
    transformer: transformer.bigint,
  })
    expires_at!: number | null;

  @Column({ type: 'varchar', nullable: true })
    token_type!: string | null;

  @Column({ type: 'varchar', nullable: true })
    scope!: string | null;

  @Column({ type: 'varchar', nullable: true })
    id_token!: string | null;

  @Column({ type: 'varchar', nullable: true })
    session_state!: string | null;

  @Column({ type: 'varchar', nullable: true })
    oauth_token_secret!: string | null;

  @Column({ type: 'varchar', nullable: true })
    oauth_token!: string | null;

  @ManyToOne(() => User, (user) => user.accounts, {
    createForeignKeyConstraints: true,
  })
    user!: User;
}

@Entity({ name: 'sessions' })
export class SessionEntity {
  @PrimaryGeneratedColumn('uuid')
    id!: string;

  @Column({ unique: true })
    sessionToken!: string;

  @Column({ type: 'uuid' })
    userId!: string;

  @Column({ transformer: transformer.date })
    expires!: string;

  @ManyToOne(() => User, (user) => user.sessions)
    user!: User;
}

@Entity({ name: 'verification_tokens' })
export class VerificationTokenEntity {
  @PrimaryGeneratedColumn('uuid')
    id!: string;

  @Column({ type: 'uuid' })
    userId!: string;

  @Column()
    token!: string;

  @Column()
    identifier!: string;

  @Column({ transformer: transformer.date })
    expires!: string;
}

--- File: feedback.ts ---
import { Entity, PrimaryGeneratedColumn, Column } from 'typeorm';

@Entity('feedback_forms', { name: 'feedback_forms' })
export default class Feedback {
  @PrimaryGeneratedColumn()
    id!: number;

  @Column()
    name!: string;

  @Column()
    lastName!: string;

  @Column()
    course!: string;

  @Column({ type: 'date' })
    sessionDate!: Date | null;

  @Column()
    experience!: string;

  @Column('text')
    feedback!: string;

  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })
    createdAt!: Date;
}


--- File: content.ts ---
import { Entity, Column, ManyToOne, OneToMany, JoinColumn, BeforeInsert, BeforeUpdate } from 'typeorm';

import BaseEntity from './base-entity';
import { ContentLevel, ContentType } from './enums';
import type Subject from './subject';

@Entity('content', { name: 'content' })
export default class Content extends BaseEntity {
  @Column({ nullable: true })
    parent_id?: number;

  // @ManyToOne(
  //   'Content',
  //   (content: IContent) => content.children,
  //   {
  //     onDelete: 'CASCADE',
  //   }
  // )
  // @JoinColumn({ name: 'parent_id' })
  //   parent!: IContent;
  @ManyToOne(() => Content, (content) => content.children, {
    onDelete: 'CASCADE',
  })
  @JoinColumn({ name: 'parent_id' })
    parentd?: Content;

  // @OneToMany(
  //   'Content',
  //   (content: IContent) => content.parent
  // )
  //   children?: IContent[];

  @OneToMany(() => Content, (content) => content.parentd)
    children?: Content[];

  @Column()
    name!: string;

  @Column({
    type: 'enum',
    enum: ContentType,
  })
    type!: ContentType;

  @Column({
    type: 'int',
    enum: ContentLevel,
  })
    level!: ContentLevel;

  @Column({ type: 'text', nullable: true })
    description?: string;

  @Column()
    subject_id!: number;

  @ManyToOne( 'Subject', (subject: Subject) => subject.contents, {
    onDelete: 'CASCADE',
  })
  @JoinColumn({ name: 'subject_id' })
    subject!: Subject;

  /**
   * Validation: If content type is CHAPTER, it must be linked to a Subject.
   */
  @BeforeInsert()
  @BeforeUpdate()
  async validateChapterSubject() {
    if (this.type === ContentType.CHAPTER && !this.subject_id) {
      throw new Error('Content of type "CHAPTER" must be associated with a Subject.');
    }
  }
}


--- File: past-paper-resource.ts ---

import { Entity, Column, ManyToOne, JoinColumn } from 'typeorm';

import BaseEntity from './base-entity';
import { PastPaperResourceType } from './enums';
import type PastPaper from './past-paper';
import type Resource from './resource';

@Entity('past_paper_resource', { name: 'past_paper_resource' })
export default class PastPaperResource extends BaseEntity {
  @Column()
    past_paper_id: number;

  @Column()
    resource_id!: number;

  @Column({
    type: 'enum',
    enum: PastPaperResourceType,
  })
    resource_type!: PastPaperResourceType;

  // @ManyToOne(
  //   'PastPaper',
  //   (pastPaper: PastPaper) => pastPaper.resourcesa,
  //   {
  //     onDelete: 'CASCADE',
  //   }
  // )
  // @JoinColumn({ name: 'past_paper_id' })
  //   pastPaper?: PastPaper;

  // @ManyToOne('PastPaper', 'resourcesa', {
  //   onDelete: 'CASCADE',
  // })
  
  @ManyToOne('PastPaper', (pastPaper: PastPaper) => pastPaper.resourcesa, { onDelete: 'CASCADE' })
  @JoinColumn({ name: 'past_paper_id' })
    pastPaper!: PastPaper;

  @ManyToOne('Resource', {
    onDelete: 'CASCADE',
  })
  @JoinColumn({ name: 'resource_id' })
    resource!: Resource;
}


--- File: past-paper.ts ---
import { Entity, Column, OneToMany, ManyToOne, JoinColumn } from 'typeorm';

import BaseEntity from './base-entity';
import type PastPaperResource from './past-paper-resource';
import type Subject from './subject';

@Entity('past_paper', {name: 'past_paper'})
export default class PastPaper extends BaseEntity {
  @Column()
    title!: string;

  @Column()
    year!: number;

  // @OneToMany('PastPaperResource', (pastPaperResource: PastPaperResource) => pastPaperResource.pastPaper, {
  //   cascade: true,
  // })
  //   resourcesa?: PastPaperResource[];

  @OneToMany('PastPaperResource', 'pastPaper', {
    cascade: true,
  })
    resourcesa!: PastPaperResource[];

  @Column({ nullable: true })
    subject_id!: number;

  @ManyToOne('Subject', (subject: Subject) => subject.pastPapers, {
    onDelete: 'SET NULL',
  })
  @JoinColumn({ name: 'subject_id' })
    subject?: Subject;
}

--- File: revision-note-resource.ts ---

import { Entity, Column, ManyToOne, JoinColumn } from 'typeorm';

import BaseEntity from './base-entity';
import { RevisionNoteResourceType } from './enums/resource-types';
import type Resource from './resource';
import type RevisionNote from './revision-note';

@Entity('revision_note_resource', { name: 'revision_note_resource' })
export default class RevisionNoteResource extends BaseEntity {
  @Column()
    revision_note_id: number;

  @Column()
    resource_id: number;

  @Column({
    type: 'enum',
    enum: RevisionNoteResourceType,
    default: RevisionNoteResourceType.NOTE
  })
    resource_type: RevisionNoteResourceType;

  @ManyToOne(
    'RevisionNote',
    (revisionNote: RevisionNote) => revisionNote.resourcesb,
    {
      onDelete: 'CASCADE',
    }
  )
  @JoinColumn({ name: 'revision_note_id' })
    revisionNote?: RevisionNote;

  @ManyToOne(
    'Resource',
    {
      onDelete: 'CASCADE',
    }
  )
  @JoinColumn({ name: 'resource_id' })
    resource!: Resource;
}

--- File: revision-note.ts ---

import { Entity, Column, ManyToOne, OneToMany, JoinColumn } from 'typeorm';

import BaseEntity from './base-entity';
import type Content from './content';
import type RevisionNoteResource from './revision-note-resource';

@Entity('revision_note', { name: 'revision_note' })
export default class RevisionNote extends BaseEntity {
  @Column()
    content_id: number;

  @Column()
    title: string;

  @ManyToOne(
    'Content',
    {
      onDelete: 'CASCADE',
    }
  )
  @JoinColumn({ name: 'content_id' })
    content!: Content;

  @OneToMany(
    'RevisionNoteResource',
    (resource: RevisionNoteResource) => resource.revisionNote,
    {
      cascade: true
    }
  )
    resourcesb?: RevisionNoteResource[];
}

--- File: subject.ts ---
import { Entity, Column, OneToMany } from 'typeorm';

import BaseEntity from './base-entity';
import type Content from './content';
import { SubjectResourceType } from './enums/subject-types';
import type { SubjectMetadata } from './enums/subject-types';
import type PastPaper from './past-paper';

@Entity('subjects', { name: 'subjects' })
export default class Subject extends BaseEntity {
  @Column()
    name!: string;

  @Column({ type: 'text', nullable: true })
    description?: string;

  @Column({ nullable: true })
    code?: string;

  @Column({
    type: 'jsonb',
    default: {
      tags: [],
      resourceType: SubjectResourceType.OTHER,
    },
  })
    metadata!: SubjectMetadata;

  @OneToMany('Content', (content: Content) => content.subject)
    contents?: Content[];

  @OneToMany('PastPaper', (ppr: PastPaper) => ppr.subject)
    pastPapers!: PastPaper[];

  addTag(tag: string): void {
    if (!this.metadata.tags) {
      this.metadata.tags = [];
    }
    if (!this.metadata.tags.includes(tag)) {
      this.metadata.tags.push(tag);
    }
  }

  removeTag(tag: string): void {
    if (this.metadata.tags) {
      this.metadata.tags = this.metadata.tags.filter(t => t !== tag);
    }
  }

  setResourceType(type: SubjectResourceType): void {
    this.metadata.resourceType = type;
  }

  addPrerequisite(prerequisite: string): void {
    if (!this.metadata.prerequisites) {
      this.metadata.prerequisites = [];
    }
    if (!this.metadata.prerequisites.includes(prerequisite)) {
      this.metadata.prerequisites.push(prerequisite);
    }
  }

  setCustomField(key: string, value: string): void {
    if (!this.metadata.customFields) {
      this.metadata.customFields = {};
    }
    this.metadata.customFields[key] = value;
  }
}


--- File: topical-question-resource.ts ---

import { Entity, Column, ManyToOne, JoinColumn } from 'typeorm';

import BaseEntity from './base-entity';
import { TopicalQuestionResourceType } from './enums';
import type Resource from './resource';
import type TopicalQuestion from './topical-question';

@Entity('topical_question_resource', { name: 'topical_question_resource' })
export default class TopicalQuestionResource extends BaseEntity {
  @Column()
    topical_question_id!: number;

  @Column()
    resource_id!: number;

  @Column({
    type: 'enum',
    enum: TopicalQuestionResourceType,
  })
    resource_type!: TopicalQuestionResourceType;

  @ManyToOne(
    'TopicalQuestion',
    (topicalQuestion: TopicalQuestion) => topicalQuestion.resourcesc,
    {
      onDelete: 'CASCADE',
    }
  )
  @JoinColumn({ name: 'topical_question_id' })
    topicalQuestion!: TopicalQuestion;

  @ManyToOne(
    'Resource',
    {
      onDelete: 'CASCADE',
    }
  )
  @JoinColumn({ name: 'resource_id' })
    resource!: Resource;
}


--- File: topical-question.ts ---

import { Entity, Column, ManyToOne, OneToMany, JoinColumn } from 'typeorm';

import BaseEntity from './base-entity';
import type Content from './content';
import type TopicalQuestionResource from './topical-question-resource';

@Entity('topical_question', { name: 'topical_question' })
export default class TopicalQuestion extends BaseEntity {
  @Column()
    content_id!: number;

  @Column()
    title!: string;

  @ManyToOne(
    'Content',
    {
      onDelete: 'CASCADE',
    }
  )
  @JoinColumn({ name: 'content_id' })
    content!: Content;

  @OneToMany(
    'TopicalQuestionResource',
    (resource: TopicalQuestionResource) => resource.topicalQuestion,
    {
      cascade: true
    }
  )
    resourcesc?: TopicalQuestionResource[];
}

--- File: index.ts ---
import BaseEntity from './base-entity';
import Contact from './contact';
import Content from './content';
import Feedback from './feedback';
import PastPaper from './past-paper';
import PastPaperResource from './past-paper-resource';
import Resource from './resource';
import RevisionNote from './revision-note';
import RevisionNoteResource from './revision-note-resource';
import Subject from './subject';
import TopicalQuestion from './topical-question';
import TopicalQuestionResource from './topical-question-resource';
import { User, AccountEntity, SessionEntity, VerificationTokenEntity } from './user';

// Create a consolidated array of all entities
export const Entities = [
  // Auth entities
  User,
  AccountEntity,
  SessionEntity,
  VerificationTokenEntity,
  
  // Base entity
  BaseEntity,
  
  // Core entities
  Resource,
  Contact,
  Feedback,
  Content,
  Subject,
  
  // Past Paper entities
  PastPaper,
  PastPaperResource,
  
  // Topical Question entities
  TopicalQuestion,
  TopicalQuestionResource,
  
  // Revision Note entities
  RevisionNote,
  RevisionNoteResource,
] as const;

// Individual exports
export {
  // Auth
  User,
  AccountEntity,
  SessionEntity,
  VerificationTokenEntity,
  
  // Base
  BaseEntity,
  
  // Core
  Resource,
  Contact,
  Feedback,
  Content,
  Subject,
  
  // Past Paper
  PastPaper,
  PastPaperResource,
  
  // Topical Question
  TopicalQuestion,
  TopicalQuestionResource,
  
  // Revision Note
  RevisionNote,
  RevisionNoteResource,
};

--- File: base-entity.ts ---
import { CreateDateColumn, UpdateDateColumn, PrimaryGeneratedColumn } from 'typeorm';

export default abstract class BaseEntity {
  @PrimaryGeneratedColumn()
    id: number;

  @CreateDateColumn()
    created_at: Date;

  @UpdateDateColumn()
    updated_at: Date;
}


--- File: resource.ts ---
import { Entity, Column } from 'typeorm';

import BaseEntity from './base-entity';
import { IResource } from './interfaces';

@Entity('resource', { name: 'resource' })
export default class Resource extends BaseEntity implements IResource {
  @Column()
    url: string;

  @Column()
    type: string;
}

