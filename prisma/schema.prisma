datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enums
enum ContentType {
  CHAPTER
  TOPIC
  SUBTOPIC
}

enum ContentLevel {
  CHAPTER
  TOPIC
  SUBTOPIC
}

enum SubjectResourceType {
  COURSE
  WORKSHOP
  TUTORIAL
  REFERENCE
  LAB
  OTHER
}

enum PastPaperResourceType {
  QUESTION_PAPER
  MARKING_SCHEME
  SOLUTION_BOOKLET
}

enum RevisionNoteResourceType {
  NOTE
  ATTACHMENT
  SUMMARY
}

enum TopicalQuestionResourceType {
  QUESTION_PAPER
  MARKING_SCHEME
  SOLUTION_BOOKLET
}

enum SubjectDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

// Base Entity (abstract in TypeORM)
model BaseEntity {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

// User and Authentication Entities


model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  role          String    @default("USER")
  name          String
  password      String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}



// Contact Entity
model Contact {
  id        String   @id @default(uuid())
  name      String
  lastName  String
  email     String
  phone     String
  message   String
  createdAt DateTime @default(now())
}

// Feedback Entity
model Feedback {
  id          Int       @id @default(autoincrement())
  name        String
  lastName    String
  course      String
  sessionDate DateTime? @db.Date
  experience  String
  feedback    String    @db.Text
  createdAt   DateTime  @default(now())
}

// Subject Entity
model Subject {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  code        String?
  metadata    Json     @default("{\"tags\": [], \"resourceType\": \"OTHER\", \"educationLevel\": \"\", \"examBoard\": \"\"}")
  
  contents    Content[]
  pastPapers  PastPaper[]
}

// Content Entity
model Content {
  id          Int         @id @default(autoincrement())
  parent_id   Int?
  name        String
  type        ContentType
  level       ContentLevel
  description String?
  subject_id  Int
  
  parent      Content?    @relation("ContentHierarchy", fields: [parent_id], references: [id], onDelete: Cascade)
  children    Content[]   @relation("ContentHierarchy")
  
  subject     Subject     @relation(fields: [subject_id], references: [id], onDelete: Cascade)
  
  revisionNotes      RevisionNote[]
  topicalQuestions  TopicalQuestion[]
}

// Resource Entity
model Resource {
  id          Int      @id @default(autoincrement())
  url         String
  type        String
  
  pastPaperResources     PastPaperResource[]
  revisionNoteResources  RevisionNoteResource[]
  topicalQuestionResources TopicalQuestionResource[]
}

// Past Paper Entity
model PastPaper {
  id          Int      @id @default(autoincrement())
  title       String
  year        Int
  subject_id  Int?
  
  subject     Subject?  @relation(fields: [subject_id], references: [id], onDelete: SetNull)
  resources   PastPaperResource[]
}

// Past Paper Resource Entity
model PastPaperResource {
  id              Int                 @id @default(autoincrement())
  past_paper_id   Int
  resource_id     Int
  resource_type   PastPaperResourceType
  
  pastPaper       PastPaper  @relation(fields: [past_paper_id], references: [id], onDelete: Cascade)
  resource        Resource   @relation(fields: [resource_id], references: [id], onDelete: Cascade)
}

// Revision Note Entity
model RevisionNote {
  id          Int      @id @default(autoincrement())
  content_id  Int
  title       String
  
  content     Content  @relation(fields: [content_id], references: [id], onDelete: Cascade)
  resources   RevisionNoteResource[]
}

// Revision Note Resource Entity
model RevisionNoteResource {
  id                  Int                     @id @default(autoincrement())
  revision_note_id    Int
  resource_id         Int
  resource_type       RevisionNoteResourceType @default(NOTE)
  
  revisionNote        RevisionNote @relation(fields: [revision_note_id], references: [id], onDelete: Cascade)
  resource            Resource     @relation(fields: [resource_id], references: [id], onDelete: Cascade)
}

// Topical Question Entity
model TopicalQuestion {
  id          Int      @id @default(autoincrement())
  content_id  Int
  title       String
  
  content     Content  @relation(fields: [content_id], references: [id], onDelete: Cascade)
  resources   TopicalQuestionResource[]
}

// Topical Question Resource Entity
model TopicalQuestionResource {
  id                      Int                         @id @default(autoincrement())
  topical_question_id     Int
  resource_id             Int
  resource_type           TopicalQuestionResourceType
  
  topicalQuestion         TopicalQuestion @relation(fields: [topical_question_id], references: [id], onDelete: Cascade)
  resource                Resource         @relation(fields: [resource_id], references: [id], onDelete: Cascade)
}